Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BARN
    BEGIN
    BIGGEST
    BIGGESTEQ
    BIGGSMALLEQ
    BREAK
    CIRCUMFLEX
    CLASS
    CLOSEKEY
    COMMENT
    COMMENTMULTI
    DIFF
    DIV
    DO
    DOUBLEBAR
    DOUBLEE
    ELSIF
    EXCLAMATION
    EXPO
    FALSE
    FOR
    ID_CLASS
    ID_GLOBAL
    ID_INSTANCE
    IN
    LSHIFT
    MINUS
    MODULE
    NAME
    NEGATION
    NEW
    NIL
    NOT
    OPENKEY
    OR
    PLUS
    POINTRANGE
    PONTO
    REST
    RSHIFT
    SELF
    SIMPLEBAR
    SIMPLEE
    SMALL
    SMALLEQ
    SUPER
    TIMES
    TRIPLEEQ
    TRUE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> funcdecl
Rule 2     program -> funcdecl program
Rule 3     program -> stm
Rule 4     program -> stm program
Rule 5     program -> call
Rule 6     funcdecl -> signature body
Rule 7     signature -> DEF ID
Rule 8     body -> stms END
Rule 9     stms -> stm
Rule 10    stms -> stm stms
Rule 11    stm -> exp
Rule 12    stm -> exp PONTOVIRGULA
Rule 13    stm -> s
Rule 14    s -> s1
Rule 15    s -> s2
Rule 16    s1 -> stms
Rule 17    s1 -> IF LPAREN exp RPAREN s1 ELSE s1
Rule 18    s1 -> IF LPAREN exp RPAREN body ELSE body
Rule 19    s1 -> IF LPAREN exp RPAREN s1 ELSE body
Rule 20    s1 -> IF LPAREN exp RPAREN body ELSE s1
Rule 21    s2 -> IF LPAREN exp RPAREN s1 ELSE s1
Rule 22    s1 -> IF LPAREN exp RPAREN body
Rule 23    s1 -> IF LPAREN exp RPAREN s1 ELSE s2
Rule 24    s1 -> IF LPAREN exp RPAREN body ELSE s2
Rule 25    s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1
Rule 26    s1 -> IF LPAREN exp RPAREN THEN body ELSE body
Rule 27    s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body
Rule 28    s1 -> IF LPAREN exp RPAREN THEN body ELSE s1
Rule 29    s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1
Rule 30    s1 -> IF LPAREN exp RPAREN THEN body
Rule 31    s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2
Rule 32    s1 -> IF LPAREN exp RPAREN THEN body ELSE s2
Rule 33    s1 -> IF exp s1 ELSE s1
Rule 34    s1 -> IF exp body ELSE body
Rule 35    s1 -> IF exp s1 ELSE body
Rule 36    s1 -> IF exp body ELSE s1
Rule 37    s2 -> IF exp s1 ELSE s1
Rule 38    s1 -> IF exp body
Rule 39    s1 -> IF exp body ELSE s2
Rule 40    s1 -> IF exp THEN s1 ELSE s1
Rule 41    s1 -> IF exp THEN body ELSE body
Rule 42    s1 -> IF exp THEN s1 ELSE body
Rule 43    s1 -> IF exp THEN body ELSE s1
Rule 44    s2 -> IF exp THEN s2 ELSE s2
Rule 45    s1 -> IF exp THEN body
Rule 46    s1 -> IF exp THEN s1 ELSE s2
Rule 47    s1 -> IF exp THEN body ELSE s2
Rule 48    stm -> RETURN exp
Rule 49    stm -> RETURN exp PONTOVIRGULA
Rule 50    exp -> call
Rule 51    exp -> assign
Rule 52    exp -> NUMBER
Rule 53    exp -> STRING
Rule 54    exp -> ID
Rule 55    exp -> exp DOUBLEEQUAL exp
Rule 56    assign -> ID EQ exp
Rule 57    call -> ID LPAREN params RPAREN
Rule 58    call -> ID LPAREN RPAREN
Rule 59    params -> exp VIRGULA params
Rule 60    params -> exp

Terminals, with rules where they appear

AND                  : 
BARN                 : 
BEGIN                : 
BIGGEST              : 
BIGGESTEQ            : 
BIGGSMALLEQ          : 
BREAK                : 
CIRCUMFLEX           : 
CLASS                : 
CLOSEKEY             : 
COMMENT              : 
COMMENTMULTI         : 
DEF                  : 7
DIFF                 : 
DIV                  : 
DO                   : 
DOUBLEBAR            : 
DOUBLEE              : 
DOUBLEEQUAL          : 55
ELSE                 : 17 18 19 20 21 23 24 25 26 27 28 29 31 32 33 34 35 36 37 39 40 41 42 43 44 46 47
ELSIF                : 
END                  : 8
EQ                   : 56
EXCLAMATION          : 
EXPO                 : 
FALSE                : 
FOR                  : 
ID                   : 7 54 56 57 58
ID_CLASS             : 
ID_GLOBAL            : 
ID_INSTANCE          : 
IF                   : 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
IN                   : 
LPAREN               : 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 57 58
LSHIFT               : 
MINUS                : 
MODULE               : 
NAME                 : 
NEGATION             : 
NEW                  : 
NIL                  : 
NOT                  : 
NUMBER               : 52
OPENKEY              : 
OR                   : 
PLUS                 : 
POINTRANGE           : 
PONTO                : 
PONTOVIRGULA         : 12 49
REST                 : 
RETURN               : 48 49
RPAREN               : 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 57 58
RSHIFT               : 
SELF                 : 
SIMPLEBAR            : 
SIMPLEE              : 
SMALL                : 
SMALLEQ              : 
STRING               : 53
SUPER                : 
THEN                 : 25 26 27 28 29 30 31 32 40 41 42 43 44 45 46 47
TIMES                : 
TRIPLEEQ             : 
TRUE                 : 
VIRGULA              : 59
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assign               : 51
body                 : 6 18 18 19 20 22 24 26 26 27 28 30 32 34 34 35 36 38 39 41 41 42 43 45 47
call                 : 5 50
exp                  : 11 12 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 55 55 56 59 60
funcdecl             : 1 2
params               : 57 59
program              : 2 4 0
s                    : 13
s1                   : 14 17 17 19 20 21 21 23 25 25 27 28 29 29 31 33 33 35 36 37 37 40 40 42 43 46
s2                   : 15 23 24 31 32 39 44 44 46 47
signature            : 6
stm                  : 3 4 9 10
stms                 : 8 10 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) program -> . stm
    (4) program -> . stm program
    (5) program -> . call
    (6) funcdecl -> . signature body
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (7) signature -> . DEF ID
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (56) assign -> . ID EQ exp
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms

    RETURN          shift and go to state 8
    ID              shift and go to state 9
    DEF             shift and go to state 10
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    IF              shift and go to state 17

    program                        shift and go to state 1
    funcdecl                       shift and go to state 2
    stm                            shift and go to state 3
    call                           shift and go to state 4
    signature                      shift and go to state 5
    exp                            shift and go to state 6
    s                              shift and go to state 7
    assign                         shift and go to state 11
    s1                             shift and go to state 14
    s2                             shift and go to state 15
    stms                           shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> funcdecl .
    (2) program -> funcdecl . program
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) program -> . stm
    (4) program -> . stm program
    (5) program -> . call
    (6) funcdecl -> . signature body
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (7) signature -> . DEF ID
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (56) assign -> . ID EQ exp
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms

    $end            reduce using rule 1 (program -> funcdecl .)
    RETURN          shift and go to state 8
    ID              shift and go to state 9
    DEF             shift and go to state 10
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    IF              shift and go to state 17

    funcdecl                       shift and go to state 2
    program                        shift and go to state 18
    stm                            shift and go to state 3
    call                           shift and go to state 4
    signature                      shift and go to state 5
    exp                            shift and go to state 6
    s                              shift and go to state 7
    assign                         shift and go to state 11
    s1                             shift and go to state 14
    s2                             shift and go to state 15
    stms                           shift and go to state 16

state 3

    (3) program -> stm .
    (4) program -> stm . program
    (9) stms -> stm .
    (10) stms -> stm . stms
    (1) program -> . funcdecl
    (2) program -> . funcdecl program
    (3) program -> . stm
    (4) program -> . stm program
    (5) program -> . call
    (9) stms -> . stm
    (10) stms -> . stm stms
    (6) funcdecl -> . signature body
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (7) signature -> . DEF ID
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (56) assign -> . ID EQ exp
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

  ! reduce/reduce conflict for $end resolved using rule 3 (program -> stm .)
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 3 (program -> stm .)
    RETURN          shift and go to state 8
    ID              shift and go to state 9
    DEF             shift and go to state 10
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    IF              shift and go to state 17

  ! RETURN          [ reduce using rule 9 (stms -> stm .) ]
  ! ID              [ reduce using rule 9 (stms -> stm .) ]
  ! DEF             [ reduce using rule 9 (stms -> stm .) ]
  ! NUMBER          [ reduce using rule 9 (stms -> stm .) ]
  ! STRING          [ reduce using rule 9 (stms -> stm .) ]
  ! IF              [ reduce using rule 9 (stms -> stm .) ]
  ! $end            [ reduce using rule 9 (stms -> stm .) ]

    stm                            shift and go to state 3
    program                        shift and go to state 19
    stms                           shift and go to state 20
    funcdecl                       shift and go to state 2
    call                           shift and go to state 4
    signature                      shift and go to state 5
    exp                            shift and go to state 6
    s                              shift and go to state 7
    assign                         shift and go to state 11
    s1                             shift and go to state 14
    s2                             shift and go to state 15

state 4

    (5) program -> call .
    (50) exp -> call .

  ! reduce/reduce conflict for $end resolved using rule 5 (program -> call .)
    $end            reduce using rule 5 (program -> call .)
    PONTOVIRGULA    reduce using rule 50 (exp -> call .)
    DOUBLEEQUAL     reduce using rule 50 (exp -> call .)
    RETURN          reduce using rule 50 (exp -> call .)
    ID              reduce using rule 50 (exp -> call .)
    DEF             reduce using rule 50 (exp -> call .)
    NUMBER          reduce using rule 50 (exp -> call .)
    STRING          reduce using rule 50 (exp -> call .)
    IF              reduce using rule 50 (exp -> call .)

  ! $end            [ reduce using rule 50 (exp -> call .) ]


state 5

    (6) funcdecl -> signature . body
    (8) body -> . stms END
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25
    IF              shift and go to state 17

    body                           shift and go to state 21
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    exp                            shift and go to state 6
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11
    s1                             shift and go to state 14
    s2                             shift and go to state 15

state 6

    (11) stm -> exp .
    (12) stm -> exp . PONTOVIRGULA
    (55) exp -> exp . DOUBLEEQUAL exp

    RETURN          reduce using rule 11 (stm -> exp .)
    ID              reduce using rule 11 (stm -> exp .)
    DEF             reduce using rule 11 (stm -> exp .)
    NUMBER          reduce using rule 11 (stm -> exp .)
    STRING          reduce using rule 11 (stm -> exp .)
    IF              reduce using rule 11 (stm -> exp .)
    $end            reduce using rule 11 (stm -> exp .)
    END             reduce using rule 11 (stm -> exp .)
    ELSE            reduce using rule 11 (stm -> exp .)
    PONTOVIRGULA    shift and go to state 26
    DOUBLEEQUAL     shift and go to state 27


state 7

    (13) stm -> s .

    RETURN          reduce using rule 13 (stm -> s .)
    ID              reduce using rule 13 (stm -> s .)
    DEF             reduce using rule 13 (stm -> s .)
    NUMBER          reduce using rule 13 (stm -> s .)
    STRING          reduce using rule 13 (stm -> s .)
    IF              reduce using rule 13 (stm -> s .)
    $end            reduce using rule 13 (stm -> s .)
    END             reduce using rule 13 (stm -> s .)
    ELSE            reduce using rule 13 (stm -> s .)


state 8

    (48) stm -> RETURN . exp
    (49) stm -> RETURN . exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 28
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 9

    (57) call -> ID . LPAREN params RPAREN
    (58) call -> ID . LPAREN RPAREN
    (54) exp -> ID .
    (56) assign -> ID . EQ exp

    LPAREN          shift and go to state 29
    PONTOVIRGULA    reduce using rule 54 (exp -> ID .)
    DOUBLEEQUAL     reduce using rule 54 (exp -> ID .)
    RETURN          reduce using rule 54 (exp -> ID .)
    ID              reduce using rule 54 (exp -> ID .)
    DEF             reduce using rule 54 (exp -> ID .)
    NUMBER          reduce using rule 54 (exp -> ID .)
    STRING          reduce using rule 54 (exp -> ID .)
    IF              reduce using rule 54 (exp -> ID .)
    $end            reduce using rule 54 (exp -> ID .)
    EQ              shift and go to state 30


state 10

    (7) signature -> DEF . ID

    ID              shift and go to state 31


state 11

    (51) exp -> assign .

    PONTOVIRGULA    reduce using rule 51 (exp -> assign .)
    DOUBLEEQUAL     reduce using rule 51 (exp -> assign .)
    RETURN          reduce using rule 51 (exp -> assign .)
    ID              reduce using rule 51 (exp -> assign .)
    DEF             reduce using rule 51 (exp -> assign .)
    NUMBER          reduce using rule 51 (exp -> assign .)
    STRING          reduce using rule 51 (exp -> assign .)
    IF              reduce using rule 51 (exp -> assign .)
    $end            reduce using rule 51 (exp -> assign .)
    END             reduce using rule 51 (exp -> assign .)
    ELSE            reduce using rule 51 (exp -> assign .)
    THEN            reduce using rule 51 (exp -> assign .)
    VIRGULA         reduce using rule 51 (exp -> assign .)
    RPAREN          reduce using rule 51 (exp -> assign .)


state 12

    (52) exp -> NUMBER .

    PONTOVIRGULA    reduce using rule 52 (exp -> NUMBER .)
    DOUBLEEQUAL     reduce using rule 52 (exp -> NUMBER .)
    RETURN          reduce using rule 52 (exp -> NUMBER .)
    ID              reduce using rule 52 (exp -> NUMBER .)
    DEF             reduce using rule 52 (exp -> NUMBER .)
    NUMBER          reduce using rule 52 (exp -> NUMBER .)
    STRING          reduce using rule 52 (exp -> NUMBER .)
    IF              reduce using rule 52 (exp -> NUMBER .)
    $end            reduce using rule 52 (exp -> NUMBER .)
    END             reduce using rule 52 (exp -> NUMBER .)
    ELSE            reduce using rule 52 (exp -> NUMBER .)
    THEN            reduce using rule 52 (exp -> NUMBER .)
    VIRGULA         reduce using rule 52 (exp -> NUMBER .)
    RPAREN          reduce using rule 52 (exp -> NUMBER .)


state 13

    (53) exp -> STRING .

    PONTOVIRGULA    reduce using rule 53 (exp -> STRING .)
    DOUBLEEQUAL     reduce using rule 53 (exp -> STRING .)
    RETURN          reduce using rule 53 (exp -> STRING .)
    ID              reduce using rule 53 (exp -> STRING .)
    DEF             reduce using rule 53 (exp -> STRING .)
    NUMBER          reduce using rule 53 (exp -> STRING .)
    STRING          reduce using rule 53 (exp -> STRING .)
    IF              reduce using rule 53 (exp -> STRING .)
    $end            reduce using rule 53 (exp -> STRING .)
    END             reduce using rule 53 (exp -> STRING .)
    ELSE            reduce using rule 53 (exp -> STRING .)
    THEN            reduce using rule 53 (exp -> STRING .)
    VIRGULA         reduce using rule 53 (exp -> STRING .)
    RPAREN          reduce using rule 53 (exp -> STRING .)


state 14

    (14) s -> s1 .

    RETURN          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)


state 15

    (15) s -> s2 .

    RETURN          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)


state 16

    (16) s1 -> stms .

    RETURN          reduce using rule 16 (s1 -> stms .)
    ID              reduce using rule 16 (s1 -> stms .)
    DEF             reduce using rule 16 (s1 -> stms .)
    NUMBER          reduce using rule 16 (s1 -> stms .)
    STRING          reduce using rule 16 (s1 -> stms .)
    IF              reduce using rule 16 (s1 -> stms .)
    $end            reduce using rule 16 (s1 -> stms .)
    ELSE            reduce using rule 16 (s1 -> stms .)
    END             reduce using rule 16 (s1 -> stms .)


state 17

    (17) s1 -> IF . LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> IF . LPAREN exp RPAREN body ELSE body
    (19) s1 -> IF . LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> IF . LPAREN exp RPAREN body ELSE s1
    (22) s1 -> IF . LPAREN exp RPAREN body
    (23) s1 -> IF . LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> IF . LPAREN exp RPAREN body ELSE s2
    (25) s1 -> IF . LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> IF . LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> IF . LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> IF . LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> IF . LPAREN exp RPAREN THEN body
    (31) s1 -> IF . LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> IF . LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> IF . exp s1 ELSE s1
    (34) s1 -> IF . exp body ELSE body
    (35) s1 -> IF . exp s1 ELSE body
    (36) s1 -> IF . exp body ELSE s1
    (38) s1 -> IF . exp body
    (39) s1 -> IF . exp body ELSE s2
    (40) s1 -> IF . exp THEN s1 ELSE s1
    (41) s1 -> IF . exp THEN body ELSE body
    (42) s1 -> IF . exp THEN s1 ELSE body
    (43) s1 -> IF . exp THEN body ELSE s1
    (45) s1 -> IF . exp THEN body
    (46) s1 -> IF . exp THEN s1 ELSE s2
    (47) s1 -> IF . exp THEN body ELSE s2
    (21) s2 -> IF . LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> IF . LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> IF . exp s1 ELSE s1
    (44) s2 -> IF . exp THEN s2 ELSE s2
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    LPAREN          shift and go to state 32
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 33
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 18

    (2) program -> funcdecl program .

    $end            reduce using rule 2 (program -> funcdecl program .)


state 19

    (4) program -> stm program .

    $end            reduce using rule 4 (program -> stm program .)


state 20

    (10) stms -> stm stms .
    (16) s1 -> stms .

  ! reduce/reduce conflict for RETURN resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for ID resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for DEF resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for IF resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for $end resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for END resolved using rule 10 (stms -> stm stms .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (stms -> stm stms .)
    RETURN          reduce using rule 10 (stms -> stm stms .)
    ID              reduce using rule 10 (stms -> stm stms .)
    DEF             reduce using rule 10 (stms -> stm stms .)
    NUMBER          reduce using rule 10 (stms -> stm stms .)
    STRING          reduce using rule 10 (stms -> stm stms .)
    IF              reduce using rule 10 (stms -> stm stms .)
    $end            reduce using rule 10 (stms -> stm stms .)
    END             reduce using rule 10 (stms -> stm stms .)
    ELSE            reduce using rule 10 (stms -> stm stms .)

  ! RETURN          [ reduce using rule 16 (s1 -> stms .) ]
  ! ID              [ reduce using rule 16 (s1 -> stms .) ]
  ! DEF             [ reduce using rule 16 (s1 -> stms .) ]
  ! NUMBER          [ reduce using rule 16 (s1 -> stms .) ]
  ! STRING          [ reduce using rule 16 (s1 -> stms .) ]
  ! IF              [ reduce using rule 16 (s1 -> stms .) ]
  ! $end            [ reduce using rule 16 (s1 -> stms .) ]
  ! END             [ reduce using rule 16 (s1 -> stms .) ]
  ! ELSE            [ reduce using rule 16 (s1 -> stms .) ]


state 21

    (6) funcdecl -> signature body .

    RETURN          reduce using rule 6 (funcdecl -> signature body .)
    ID              reduce using rule 6 (funcdecl -> signature body .)
    DEF             reduce using rule 6 (funcdecl -> signature body .)
    NUMBER          reduce using rule 6 (funcdecl -> signature body .)
    STRING          reduce using rule 6 (funcdecl -> signature body .)
    IF              reduce using rule 6 (funcdecl -> signature body .)
    $end            reduce using rule 6 (funcdecl -> signature body .)


state 22

    (8) body -> stms . END
    (16) s1 -> stms .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 34
    RETURN          reduce using rule 16 (s1 -> stms .)
    NUMBER          reduce using rule 16 (s1 -> stms .)
    STRING          reduce using rule 16 (s1 -> stms .)
    ID              reduce using rule 16 (s1 -> stms .)
    IF              reduce using rule 16 (s1 -> stms .)
    ELSE            reduce using rule 16 (s1 -> stms .)
    DEF             reduce using rule 16 (s1 -> stms .)
    $end            reduce using rule 16 (s1 -> stms .)

  ! END             [ reduce using rule 16 (s1 -> stms .) ]


state 23

    (9) stms -> stm .
    (10) stms -> stm . stms
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    END             reduce using rule 9 (stms -> stm .)
    ELSE            reduce using rule 9 (stms -> stm .)
    DEF             reduce using rule 9 (stms -> stm .)
    $end            reduce using rule 9 (stms -> stm .)
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25
    IF              shift and go to state 17

  ! RETURN          [ reduce using rule 9 (stms -> stm .) ]
  ! NUMBER          [ reduce using rule 9 (stms -> stm .) ]
  ! STRING          [ reduce using rule 9 (stms -> stm .) ]
  ! ID              [ reduce using rule 9 (stms -> stm .) ]
  ! IF              [ reduce using rule 9 (stms -> stm .) ]

    stm                            shift and go to state 23
    stms                           shift and go to state 20
    exp                            shift and go to state 6
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11
    s1                             shift and go to state 14
    s2                             shift and go to state 15

state 24

    (50) exp -> call .

    PONTOVIRGULA    reduce using rule 50 (exp -> call .)
    DOUBLEEQUAL     reduce using rule 50 (exp -> call .)
    END             reduce using rule 50 (exp -> call .)
    RETURN          reduce using rule 50 (exp -> call .)
    NUMBER          reduce using rule 50 (exp -> call .)
    STRING          reduce using rule 50 (exp -> call .)
    ID              reduce using rule 50 (exp -> call .)
    IF              reduce using rule 50 (exp -> call .)
    DEF             reduce using rule 50 (exp -> call .)
    $end            reduce using rule 50 (exp -> call .)
    ELSE            reduce using rule 50 (exp -> call .)
    THEN            reduce using rule 50 (exp -> call .)
    VIRGULA         reduce using rule 50 (exp -> call .)
    RPAREN          reduce using rule 50 (exp -> call .)


state 25

    (54) exp -> ID .
    (57) call -> ID . LPAREN params RPAREN
    (58) call -> ID . LPAREN RPAREN
    (56) assign -> ID . EQ exp

    PONTOVIRGULA    reduce using rule 54 (exp -> ID .)
    DOUBLEEQUAL     reduce using rule 54 (exp -> ID .)
    END             reduce using rule 54 (exp -> ID .)
    RETURN          reduce using rule 54 (exp -> ID .)
    NUMBER          reduce using rule 54 (exp -> ID .)
    STRING          reduce using rule 54 (exp -> ID .)
    ID              reduce using rule 54 (exp -> ID .)
    IF              reduce using rule 54 (exp -> ID .)
    DEF             reduce using rule 54 (exp -> ID .)
    $end            reduce using rule 54 (exp -> ID .)
    ELSE            reduce using rule 54 (exp -> ID .)
    THEN            reduce using rule 54 (exp -> ID .)
    VIRGULA         reduce using rule 54 (exp -> ID .)
    RPAREN          reduce using rule 54 (exp -> ID .)
    LPAREN          shift and go to state 29
    EQ              shift and go to state 30


state 26

    (12) stm -> exp PONTOVIRGULA .

    RETURN          reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    ID              reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    DEF             reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    NUMBER          reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    STRING          reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    IF              reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    $end            reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    END             reduce using rule 12 (stm -> exp PONTOVIRGULA .)
    ELSE            reduce using rule 12 (stm -> exp PONTOVIRGULA .)


state 27

    (55) exp -> exp DOUBLEEQUAL . exp
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 35
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 28

    (48) stm -> RETURN exp .
    (49) stm -> RETURN exp . PONTOVIRGULA
    (55) exp -> exp . DOUBLEEQUAL exp

    RETURN          reduce using rule 48 (stm -> RETURN exp .)
    ID              reduce using rule 48 (stm -> RETURN exp .)
    DEF             reduce using rule 48 (stm -> RETURN exp .)
    NUMBER          reduce using rule 48 (stm -> RETURN exp .)
    STRING          reduce using rule 48 (stm -> RETURN exp .)
    IF              reduce using rule 48 (stm -> RETURN exp .)
    $end            reduce using rule 48 (stm -> RETURN exp .)
    END             reduce using rule 48 (stm -> RETURN exp .)
    ELSE            reduce using rule 48 (stm -> RETURN exp .)
    PONTOVIRGULA    shift and go to state 36
    DOUBLEEQUAL     shift and go to state 27


state 29

    (57) call -> ID LPAREN . params RPAREN
    (58) call -> ID LPAREN . RPAREN
    (59) params -> . exp VIRGULA params
    (60) params -> . exp
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    RPAREN          shift and go to state 38
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    params                         shift and go to state 37
    exp                            shift and go to state 39
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 30

    (56) assign -> ID EQ . exp
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 40
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 31

    (7) signature -> DEF ID .

    RETURN          reduce using rule 7 (signature -> DEF ID .)
    NUMBER          reduce using rule 7 (signature -> DEF ID .)
    STRING          reduce using rule 7 (signature -> DEF ID .)
    ID              reduce using rule 7 (signature -> DEF ID .)
    IF              reduce using rule 7 (signature -> DEF ID .)


state 32

    (17) s1 -> IF LPAREN . exp RPAREN s1 ELSE s1
    (18) s1 -> IF LPAREN . exp RPAREN body ELSE body
    (19) s1 -> IF LPAREN . exp RPAREN s1 ELSE body
    (20) s1 -> IF LPAREN . exp RPAREN body ELSE s1
    (22) s1 -> IF LPAREN . exp RPAREN body
    (23) s1 -> IF LPAREN . exp RPAREN s1 ELSE s2
    (24) s1 -> IF LPAREN . exp RPAREN body ELSE s2
    (25) s1 -> IF LPAREN . exp RPAREN THEN s1 ELSE s1
    (26) s1 -> IF LPAREN . exp RPAREN THEN body ELSE body
    (27) s1 -> IF LPAREN . exp RPAREN THEN s1 ELSE body
    (28) s1 -> IF LPAREN . exp RPAREN THEN body ELSE s1
    (30) s1 -> IF LPAREN . exp RPAREN THEN body
    (31) s1 -> IF LPAREN . exp RPAREN THEN s1 ELSE s2
    (32) s1 -> IF LPAREN . exp RPAREN THEN body ELSE s2
    (21) s2 -> IF LPAREN . exp RPAREN s1 ELSE s1
    (29) s2 -> IF LPAREN . exp RPAREN THEN s1 ELSE s1
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 41
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 33

    (33) s1 -> IF exp . s1 ELSE s1
    (34) s1 -> IF exp . body ELSE body
    (35) s1 -> IF exp . s1 ELSE body
    (36) s1 -> IF exp . body ELSE s1
    (38) s1 -> IF exp . body
    (39) s1 -> IF exp . body ELSE s2
    (40) s1 -> IF exp . THEN s1 ELSE s1
    (41) s1 -> IF exp . THEN body ELSE body
    (42) s1 -> IF exp . THEN s1 ELSE body
    (43) s1 -> IF exp . THEN body ELSE s1
    (45) s1 -> IF exp . THEN body
    (46) s1 -> IF exp . THEN s1 ELSE s2
    (47) s1 -> IF exp . THEN body ELSE s2
    (37) s2 -> IF exp . s1 ELSE s1
    (44) s2 -> IF exp . THEN s2 ELSE s2
    (55) exp -> exp . DOUBLEEQUAL exp
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    THEN            shift and go to state 44
    DOUBLEEQUAL     shift and go to state 27
    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 42
    body                           shift and go to state 43
    s2                             shift and go to state 15
    stms                           shift and go to state 45
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 34

    (8) body -> stms END .

    RETURN          reduce using rule 8 (body -> stms END .)
    ID              reduce using rule 8 (body -> stms END .)
    DEF             reduce using rule 8 (body -> stms END .)
    NUMBER          reduce using rule 8 (body -> stms END .)
    STRING          reduce using rule 8 (body -> stms END .)
    IF              reduce using rule 8 (body -> stms END .)
    $end            reduce using rule 8 (body -> stms END .)
    ELSE            reduce using rule 8 (body -> stms END .)
    END             reduce using rule 8 (body -> stms END .)


state 35

    (55) exp -> exp DOUBLEEQUAL exp .
    (55) exp -> exp . DOUBLEEQUAL exp

  ! shift/reduce conflict for DOUBLEEQUAL resolved as shift
    PONTOVIRGULA    reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    RETURN          reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    ID              reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    DEF             reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    NUMBER          reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    STRING          reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    IF              reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    $end            reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    END             reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    ELSE            reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    THEN            reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    VIRGULA         reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    RPAREN          reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .)
    DOUBLEEQUAL     shift and go to state 27

  ! DOUBLEEQUAL     [ reduce using rule 55 (exp -> exp DOUBLEEQUAL exp .) ]


state 36

    (49) stm -> RETURN exp PONTOVIRGULA .

    RETURN          reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    ID              reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    DEF             reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    NUMBER          reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    STRING          reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    IF              reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    $end            reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    END             reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)
    ELSE            reduce using rule 49 (stm -> RETURN exp PONTOVIRGULA .)


state 37

    (57) call -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 46


state 38

    (58) call -> ID LPAREN RPAREN .

    $end            reduce using rule 58 (call -> ID LPAREN RPAREN .)
    PONTOVIRGULA    reduce using rule 58 (call -> ID LPAREN RPAREN .)
    DOUBLEEQUAL     reduce using rule 58 (call -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 58 (call -> ID LPAREN RPAREN .)
    ID              reduce using rule 58 (call -> ID LPAREN RPAREN .)
    DEF             reduce using rule 58 (call -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 58 (call -> ID LPAREN RPAREN .)
    STRING          reduce using rule 58 (call -> ID LPAREN RPAREN .)
    IF              reduce using rule 58 (call -> ID LPAREN RPAREN .)
    END             reduce using rule 58 (call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 58 (call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 58 (call -> ID LPAREN RPAREN .)
    VIRGULA         reduce using rule 58 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 58 (call -> ID LPAREN RPAREN .)


state 39

    (59) params -> exp . VIRGULA params
    (60) params -> exp .
    (55) exp -> exp . DOUBLEEQUAL exp

    VIRGULA         shift and go to state 47
    RPAREN          reduce using rule 60 (params -> exp .)
    DOUBLEEQUAL     shift and go to state 27


state 40

    (56) assign -> ID EQ exp .
    (55) exp -> exp . DOUBLEEQUAL exp

  ! shift/reduce conflict for DOUBLEEQUAL resolved as shift
    PONTOVIRGULA    reduce using rule 56 (assign -> ID EQ exp .)
    RETURN          reduce using rule 56 (assign -> ID EQ exp .)
    ID              reduce using rule 56 (assign -> ID EQ exp .)
    DEF             reduce using rule 56 (assign -> ID EQ exp .)
    NUMBER          reduce using rule 56 (assign -> ID EQ exp .)
    STRING          reduce using rule 56 (assign -> ID EQ exp .)
    IF              reduce using rule 56 (assign -> ID EQ exp .)
    $end            reduce using rule 56 (assign -> ID EQ exp .)
    END             reduce using rule 56 (assign -> ID EQ exp .)
    ELSE            reduce using rule 56 (assign -> ID EQ exp .)
    THEN            reduce using rule 56 (assign -> ID EQ exp .)
    VIRGULA         reduce using rule 56 (assign -> ID EQ exp .)
    RPAREN          reduce using rule 56 (assign -> ID EQ exp .)
    DOUBLEEQUAL     shift and go to state 27

  ! DOUBLEEQUAL     [ reduce using rule 56 (assign -> ID EQ exp .) ]


state 41

    (17) s1 -> IF LPAREN exp . RPAREN s1 ELSE s1
    (18) s1 -> IF LPAREN exp . RPAREN body ELSE body
    (19) s1 -> IF LPAREN exp . RPAREN s1 ELSE body
    (20) s1 -> IF LPAREN exp . RPAREN body ELSE s1
    (22) s1 -> IF LPAREN exp . RPAREN body
    (23) s1 -> IF LPAREN exp . RPAREN s1 ELSE s2
    (24) s1 -> IF LPAREN exp . RPAREN body ELSE s2
    (25) s1 -> IF LPAREN exp . RPAREN THEN s1 ELSE s1
    (26) s1 -> IF LPAREN exp . RPAREN THEN body ELSE body
    (27) s1 -> IF LPAREN exp . RPAREN THEN s1 ELSE body
    (28) s1 -> IF LPAREN exp . RPAREN THEN body ELSE s1
    (30) s1 -> IF LPAREN exp . RPAREN THEN body
    (31) s1 -> IF LPAREN exp . RPAREN THEN s1 ELSE s2
    (32) s1 -> IF LPAREN exp . RPAREN THEN body ELSE s2
    (21) s2 -> IF LPAREN exp . RPAREN s1 ELSE s1
    (29) s2 -> IF LPAREN exp . RPAREN THEN s1 ELSE s1
    (55) exp -> exp . DOUBLEEQUAL exp

    RPAREN          shift and go to state 48
    DOUBLEEQUAL     shift and go to state 27


state 42

    (33) s1 -> IF exp s1 . ELSE s1
    (35) s1 -> IF exp s1 . ELSE body
    (37) s2 -> IF exp s1 . ELSE s1
    (14) s -> s1 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 49
    END             reduce using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)

  ! ELSE            [ reduce using rule 14 (s -> s1 .) ]


state 43

    (34) s1 -> IF exp body . ELSE body
    (36) s1 -> IF exp body . ELSE s1
    (38) s1 -> IF exp body .
    (39) s1 -> IF exp body . ELSE s2

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 50
    RETURN          reduce using rule 38 (s1 -> IF exp body .)
    ID              reduce using rule 38 (s1 -> IF exp body .)
    DEF             reduce using rule 38 (s1 -> IF exp body .)
    NUMBER          reduce using rule 38 (s1 -> IF exp body .)
    STRING          reduce using rule 38 (s1 -> IF exp body .)
    IF              reduce using rule 38 (s1 -> IF exp body .)
    $end            reduce using rule 38 (s1 -> IF exp body .)
    END             reduce using rule 38 (s1 -> IF exp body .)

  ! ELSE            [ reduce using rule 38 (s1 -> IF exp body .) ]


state 44

    (40) s1 -> IF exp THEN . s1 ELSE s1
    (41) s1 -> IF exp THEN . body ELSE body
    (42) s1 -> IF exp THEN . s1 ELSE body
    (43) s1 -> IF exp THEN . body ELSE s1
    (45) s1 -> IF exp THEN . body
    (46) s1 -> IF exp THEN . s1 ELSE s2
    (47) s1 -> IF exp THEN . body ELSE s2
    (44) s2 -> IF exp THEN . s2 ELSE s2
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 51
    body                           shift and go to state 52
    s2                             shift and go to state 53
    stms                           shift and go to state 45
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 45

    (16) s1 -> stms .
    (8) body -> stms . END

  ! shift/reduce conflict for END resolved as shift
    ELSE            reduce using rule 16 (s1 -> stms .)
    RETURN          reduce using rule 16 (s1 -> stms .)
    NUMBER          reduce using rule 16 (s1 -> stms .)
    STRING          reduce using rule 16 (s1 -> stms .)
    ID              reduce using rule 16 (s1 -> stms .)
    IF              reduce using rule 16 (s1 -> stms .)
    DEF             reduce using rule 16 (s1 -> stms .)
    $end            reduce using rule 16 (s1 -> stms .)
    END             shift and go to state 34

  ! END             [ reduce using rule 16 (s1 -> stms .) ]


state 46

    (57) call -> ID LPAREN params RPAREN .

    $end            reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    PONTOVIRGULA    reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    DOUBLEEQUAL     reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    RETURN          reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    DEF             reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    NUMBER          reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    STRING          reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    IF              reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    END             reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    ELSE            reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    THEN            reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    VIRGULA         reduce using rule 57 (call -> ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 57 (call -> ID LPAREN params RPAREN .)


state 47

    (59) params -> exp VIRGULA . params
    (59) params -> . exp VIRGULA params
    (60) params -> . exp
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 39
    params                         shift and go to state 54
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 48

    (17) s1 -> IF LPAREN exp RPAREN . s1 ELSE s1
    (18) s1 -> IF LPAREN exp RPAREN . body ELSE body
    (19) s1 -> IF LPAREN exp RPAREN . s1 ELSE body
    (20) s1 -> IF LPAREN exp RPAREN . body ELSE s1
    (22) s1 -> IF LPAREN exp RPAREN . body
    (23) s1 -> IF LPAREN exp RPAREN . s1 ELSE s2
    (24) s1 -> IF LPAREN exp RPAREN . body ELSE s2
    (25) s1 -> IF LPAREN exp RPAREN . THEN s1 ELSE s1
    (26) s1 -> IF LPAREN exp RPAREN . THEN body ELSE body
    (27) s1 -> IF LPAREN exp RPAREN . THEN s1 ELSE body
    (28) s1 -> IF LPAREN exp RPAREN . THEN body ELSE s1
    (30) s1 -> IF LPAREN exp RPAREN . THEN body
    (31) s1 -> IF LPAREN exp RPAREN . THEN s1 ELSE s2
    (32) s1 -> IF LPAREN exp RPAREN . THEN body ELSE s2
    (21) s2 -> IF LPAREN exp RPAREN . s1 ELSE s1
    (29) s2 -> IF LPAREN exp RPAREN . THEN s1 ELSE s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    THEN            shift and go to state 57
    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 55
    body                           shift and go to state 56
    s2                             shift and go to state 15
    stms                           shift and go to state 45
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 49

    (33) s1 -> IF exp s1 ELSE . s1
    (35) s1 -> IF exp s1 ELSE . body
    (37) s2 -> IF exp s1 ELSE . s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 58
    body                           shift and go to state 59
    stms                           shift and go to state 45
    s2                             shift and go to state 15
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 50

    (34) s1 -> IF exp body ELSE . body
    (36) s1 -> IF exp body ELSE . s1
    (39) s1 -> IF exp body ELSE . s2
    (8) body -> . stms END
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    body                           shift and go to state 60
    s1                             shift and go to state 61
    s2                             shift and go to state 62
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 51

    (40) s1 -> IF exp THEN s1 . ELSE s1
    (42) s1 -> IF exp THEN s1 . ELSE body
    (46) s1 -> IF exp THEN s1 . ELSE s2
    (14) s -> s1 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 63
    END             reduce using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)

  ! ELSE            [ reduce using rule 14 (s -> s1 .) ]


state 52

    (41) s1 -> IF exp THEN body . ELSE body
    (43) s1 -> IF exp THEN body . ELSE s1
    (45) s1 -> IF exp THEN body .
    (47) s1 -> IF exp THEN body . ELSE s2

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 64
    RETURN          reduce using rule 45 (s1 -> IF exp THEN body .)
    ID              reduce using rule 45 (s1 -> IF exp THEN body .)
    DEF             reduce using rule 45 (s1 -> IF exp THEN body .)
    NUMBER          reduce using rule 45 (s1 -> IF exp THEN body .)
    STRING          reduce using rule 45 (s1 -> IF exp THEN body .)
    IF              reduce using rule 45 (s1 -> IF exp THEN body .)
    $end            reduce using rule 45 (s1 -> IF exp THEN body .)
    END             reduce using rule 45 (s1 -> IF exp THEN body .)

  ! ELSE            [ reduce using rule 45 (s1 -> IF exp THEN body .) ]


state 53

    (44) s2 -> IF exp THEN s2 . ELSE s2
    (15) s -> s2 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 65
    END             reduce using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)

  ! ELSE            [ reduce using rule 15 (s -> s2 .) ]


state 54

    (59) params -> exp VIRGULA params .

    RPAREN          reduce using rule 59 (params -> exp VIRGULA params .)


state 55

    (17) s1 -> IF LPAREN exp RPAREN s1 . ELSE s1
    (19) s1 -> IF LPAREN exp RPAREN s1 . ELSE body
    (23) s1 -> IF LPAREN exp RPAREN s1 . ELSE s2
    (21) s2 -> IF LPAREN exp RPAREN s1 . ELSE s1
    (14) s -> s1 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 66
    END             reduce using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)

  ! ELSE            [ reduce using rule 14 (s -> s1 .) ]


state 56

    (18) s1 -> IF LPAREN exp RPAREN body . ELSE body
    (20) s1 -> IF LPAREN exp RPAREN body . ELSE s1
    (22) s1 -> IF LPAREN exp RPAREN body .
    (24) s1 -> IF LPAREN exp RPAREN body . ELSE s2

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 67
    RETURN          reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)
    ID              reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)
    DEF             reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)
    NUMBER          reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)
    STRING          reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)
    IF              reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)
    $end            reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)
    END             reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .)

  ! ELSE            [ reduce using rule 22 (s1 -> IF LPAREN exp RPAREN body .) ]


state 57

    (25) s1 -> IF LPAREN exp RPAREN THEN . s1 ELSE s1
    (26) s1 -> IF LPAREN exp RPAREN THEN . body ELSE body
    (27) s1 -> IF LPAREN exp RPAREN THEN . s1 ELSE body
    (28) s1 -> IF LPAREN exp RPAREN THEN . body ELSE s1
    (30) s1 -> IF LPAREN exp RPAREN THEN . body
    (31) s1 -> IF LPAREN exp RPAREN THEN . s1 ELSE s2
    (32) s1 -> IF LPAREN exp RPAREN THEN . body ELSE s2
    (29) s2 -> IF LPAREN exp RPAREN THEN . s1 ELSE s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 68
    body                           shift and go to state 69
    s2                             shift and go to state 15
    stms                           shift and go to state 45
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 58

    (33) s1 -> IF exp s1 ELSE s1 .
    (37) s2 -> IF exp s1 ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for ID resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for IF resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for $end resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for END resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 33 (s1 -> IF exp s1 ELSE s1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! END             [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 33 (s1 -> IF exp s1 ELSE s1 .) ]
  ! RETURN          [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! END             [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]


state 59

    (35) s1 -> IF exp s1 ELSE body .

    RETURN          reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    ID              reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    DEF             reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    NUMBER          reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    STRING          reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    IF              reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    $end            reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    END             reduce using rule 35 (s1 -> IF exp s1 ELSE body .)
    ELSE            reduce using rule 35 (s1 -> IF exp s1 ELSE body .)


state 60

    (34) s1 -> IF exp body ELSE body .

    RETURN          reduce using rule 34 (s1 -> IF exp body ELSE body .)
    ID              reduce using rule 34 (s1 -> IF exp body ELSE body .)
    DEF             reduce using rule 34 (s1 -> IF exp body ELSE body .)
    NUMBER          reduce using rule 34 (s1 -> IF exp body ELSE body .)
    STRING          reduce using rule 34 (s1 -> IF exp body ELSE body .)
    IF              reduce using rule 34 (s1 -> IF exp body ELSE body .)
    $end            reduce using rule 34 (s1 -> IF exp body ELSE body .)
    END             reduce using rule 34 (s1 -> IF exp body ELSE body .)
    ELSE            reduce using rule 34 (s1 -> IF exp body ELSE body .)


state 61

    (36) s1 -> IF exp body ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! ID              [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! DEF             [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! STRING          [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! IF              [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! $end            [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! END             [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]
  ! ELSE            [ reduce using rule 36 (s1 -> IF exp body ELSE s1 .) ]


state 62

    (39) s1 -> IF exp body ELSE s2 .
    (15) s -> s2 .

  ! reduce/reduce conflict for RETURN resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ID resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for IF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for END resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for $end resolved using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)

  ! RETURN          [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! ID              [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! DEF             [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! NUMBER          [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! STRING          [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! IF              [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! $end            [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! END             [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]
  ! ELSE            [ reduce using rule 39 (s1 -> IF exp body ELSE s2 .) ]


state 63

    (40) s1 -> IF exp THEN s1 ELSE . s1
    (42) s1 -> IF exp THEN s1 ELSE . body
    (46) s1 -> IF exp THEN s1 ELSE . s2
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 70
    body                           shift and go to state 71
    s2                             shift and go to state 72
    stms                           shift and go to state 45
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 64

    (41) s1 -> IF exp THEN body ELSE . body
    (43) s1 -> IF exp THEN body ELSE . s1
    (47) s1 -> IF exp THEN body ELSE . s2
    (8) body -> . stms END
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    body                           shift and go to state 73
    s1                             shift and go to state 74
    s2                             shift and go to state 75
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 65

    (44) s2 -> IF exp THEN s2 ELSE . s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 76

    s2                             shift and go to state 77

state 66

    (17) s1 -> IF LPAREN exp RPAREN s1 ELSE . s1
    (19) s1 -> IF LPAREN exp RPAREN s1 ELSE . body
    (23) s1 -> IF LPAREN exp RPAREN s1 ELSE . s2
    (21) s2 -> IF LPAREN exp RPAREN s1 ELSE . s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 78
    body                           shift and go to state 79
    s2                             shift and go to state 80
    stms                           shift and go to state 45
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 67

    (18) s1 -> IF LPAREN exp RPAREN body ELSE . body
    (20) s1 -> IF LPAREN exp RPAREN body ELSE . s1
    (24) s1 -> IF LPAREN exp RPAREN body ELSE . s2
    (8) body -> . stms END
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    body                           shift and go to state 81
    s1                             shift and go to state 82
    s2                             shift and go to state 83
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 68

    (25) s1 -> IF LPAREN exp RPAREN THEN s1 . ELSE s1
    (27) s1 -> IF LPAREN exp RPAREN THEN s1 . ELSE body
    (31) s1 -> IF LPAREN exp RPAREN THEN s1 . ELSE s2
    (29) s2 -> IF LPAREN exp RPAREN THEN s1 . ELSE s1
    (14) s -> s1 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 84
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)

  ! ELSE            [ reduce using rule 14 (s -> s1 .) ]


state 69

    (26) s1 -> IF LPAREN exp RPAREN THEN body . ELSE body
    (28) s1 -> IF LPAREN exp RPAREN THEN body . ELSE s1
    (30) s1 -> IF LPAREN exp RPAREN THEN body .
    (32) s1 -> IF LPAREN exp RPAREN THEN body . ELSE s2

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 85
    RETURN          reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)
    ID              reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)
    DEF             reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)
    NUMBER          reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)
    STRING          reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)
    IF              reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)
    $end            reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)
    END             reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .)

  ! ELSE            [ reduce using rule 30 (s1 -> IF LPAREN exp RPAREN THEN body .) ]


state 70

    (40) s1 -> IF exp THEN s1 ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! END             [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 40 (s1 -> IF exp THEN s1 ELSE s1 .) ]


state 71

    (42) s1 -> IF exp THEN s1 ELSE body .

    RETURN          reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    ID              reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    DEF             reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    NUMBER          reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    STRING          reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    IF              reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    $end            reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    END             reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)
    ELSE            reduce using rule 42 (s1 -> IF exp THEN s1 ELSE body .)


state 72

    (46) s1 -> IF exp THEN s1 ELSE s2 .
    (15) s -> s2 .

  ! reduce/reduce conflict for RETURN resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ID resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for IF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for END resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for $end resolved using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)

  ! RETURN          [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! ID              [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! DEF             [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! NUMBER          [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! STRING          [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! IF              [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! $end            [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! END             [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]
  ! ELSE            [ reduce using rule 46 (s1 -> IF exp THEN s1 ELSE s2 .) ]


state 73

    (41) s1 -> IF exp THEN body ELSE body .

    RETURN          reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    ID              reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    DEF             reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    NUMBER          reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    STRING          reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    IF              reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    $end            reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    END             reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)
    ELSE            reduce using rule 41 (s1 -> IF exp THEN body ELSE body .)


state 74

    (43) s1 -> IF exp THEN body ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! ID              [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! DEF             [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! STRING          [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! IF              [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! $end            [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! END             [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]
  ! ELSE            [ reduce using rule 43 (s1 -> IF exp THEN body ELSE s1 .) ]


state 75

    (47) s1 -> IF exp THEN body ELSE s2 .
    (15) s -> s2 .

  ! reduce/reduce conflict for RETURN resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ID resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for IF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for END resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for $end resolved using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)

  ! RETURN          [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! ID              [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! DEF             [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! NUMBER          [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! STRING          [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! IF              [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! $end            [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! END             [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]
  ! ELSE            [ reduce using rule 47 (s1 -> IF exp THEN body ELSE s2 .) ]


state 76

    (21) s2 -> IF . LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> IF . LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> IF . exp s1 ELSE s1
    (44) s2 -> IF . exp THEN s2 ELSE s2
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    LPAREN          shift and go to state 86
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 87
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 77

    (44) s2 -> IF exp THEN s2 ELSE s2 .

    RETURN          reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    ID              reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    DEF             reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    NUMBER          reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    STRING          reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    IF              reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    $end            reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    END             reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)
    ELSE            reduce using rule 44 (s2 -> IF exp THEN s2 ELSE s2 .)


state 78

    (17) s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .
    (21) s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for ID resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for IF resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for $end resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for END resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! END             [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 17 (s1 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! RETURN          [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! END             [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]


state 79

    (19) s1 -> IF LPAREN exp RPAREN s1 ELSE body .

    RETURN          reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    ID              reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    DEF             reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    NUMBER          reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    STRING          reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    IF              reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    $end            reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    END             reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)
    ELSE            reduce using rule 19 (s1 -> IF LPAREN exp RPAREN s1 ELSE body .)


state 80

    (23) s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .
    (15) s -> s2 .

  ! reduce/reduce conflict for RETURN resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ID resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for IF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for END resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for $end resolved using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)

  ! RETURN          [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! ID              [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! DEF             [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! NUMBER          [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! STRING          [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! IF              [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! $end            [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! END             [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]
  ! ELSE            [ reduce using rule 23 (s1 -> IF LPAREN exp RPAREN s1 ELSE s2 .) ]


state 81

    (18) s1 -> IF LPAREN exp RPAREN body ELSE body .

    RETURN          reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    ID              reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    DEF             reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    NUMBER          reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    STRING          reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    IF              reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    $end            reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    END             reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)
    ELSE            reduce using rule 18 (s1 -> IF LPAREN exp RPAREN body ELSE body .)


state 82

    (20) s1 -> IF LPAREN exp RPAREN body ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! ID              [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! DEF             [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! STRING          [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! IF              [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! $end            [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! END             [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]
  ! ELSE            [ reduce using rule 20 (s1 -> IF LPAREN exp RPAREN body ELSE s1 .) ]


state 83

    (24) s1 -> IF LPAREN exp RPAREN body ELSE s2 .
    (15) s -> s2 .

  ! reduce/reduce conflict for RETURN resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ID resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for IF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for END resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for $end resolved using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)

  ! RETURN          [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! ID              [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! DEF             [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! NUMBER          [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! STRING          [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! IF              [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! $end            [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! END             [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]
  ! ELSE            [ reduce using rule 24 (s1 -> IF LPAREN exp RPAREN body ELSE s2 .) ]


state 84

    (25) s1 -> IF LPAREN exp RPAREN THEN s1 ELSE . s1
    (27) s1 -> IF LPAREN exp RPAREN THEN s1 ELSE . body
    (31) s1 -> IF LPAREN exp RPAREN THEN s1 ELSE . s2
    (29) s2 -> IF LPAREN exp RPAREN THEN s1 ELSE . s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (8) body -> . stms END
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 88
    body                           shift and go to state 89
    s2                             shift and go to state 90
    stms                           shift and go to state 45
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 85

    (26) s1 -> IF LPAREN exp RPAREN THEN body ELSE . body
    (28) s1 -> IF LPAREN exp RPAREN THEN body ELSE . s1
    (32) s1 -> IF LPAREN exp RPAREN THEN body ELSE . s2
    (8) body -> . stms END
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    body                           shift and go to state 91
    s1                             shift and go to state 92
    s2                             shift and go to state 93
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 86

    (21) s2 -> IF LPAREN . exp RPAREN s1 ELSE s1
    (29) s2 -> IF LPAREN . exp RPAREN THEN s1 ELSE s1
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp

    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 94
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 87

    (37) s2 -> IF exp . s1 ELSE s1
    (44) s2 -> IF exp . THEN s2 ELSE s2
    (55) exp -> exp . DOUBLEEQUAL exp
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    THEN            shift and go to state 96
    DOUBLEEQUAL     shift and go to state 27
    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 95
    s2                             shift and go to state 15
    stms                           shift and go to state 16
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 88

    (25) s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .
    (29) s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for ID resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for IF resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for $end resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for END resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! END             [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 25 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! RETURN          [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! END             [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]


state 89

    (27) s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .

    RETURN          reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    ID              reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    DEF             reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    NUMBER          reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    STRING          reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    IF              reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    $end            reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    END             reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)
    ELSE            reduce using rule 27 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE body .)


state 90

    (31) s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .
    (15) s -> s2 .

  ! reduce/reduce conflict for RETURN resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ID resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for IF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for END resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for $end resolved using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)

  ! RETURN          [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! ID              [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! DEF             [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! NUMBER          [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! STRING          [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! IF              [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! $end            [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! END             [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]
  ! ELSE            [ reduce using rule 31 (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2 .) ]


state 91

    (26) s1 -> IF LPAREN exp RPAREN THEN body ELSE body .

    RETURN          reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    ID              reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    DEF             reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    NUMBER          reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    STRING          reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    IF              reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    $end            reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    END             reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)
    ELSE            reduce using rule 26 (s1 -> IF LPAREN exp RPAREN THEN body ELSE body .)


state 92

    (28) s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! ID              [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! DEF             [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! STRING          [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! IF              [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! $end            [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! END             [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]
  ! ELSE            [ reduce using rule 28 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1 .) ]


state 93

    (32) s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .
    (15) s -> s2 .

  ! reduce/reduce conflict for RETURN resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ID resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for IF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for END resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for DEF resolved using rule 15 (s -> s2 .)
  ! reduce/reduce conflict for $end resolved using rule 15 (s -> s2 .)
    RETURN          reduce using rule 15 (s -> s2 .)
    NUMBER          reduce using rule 15 (s -> s2 .)
    STRING          reduce using rule 15 (s -> s2 .)
    ID              reduce using rule 15 (s -> s2 .)
    IF              reduce using rule 15 (s -> s2 .)
    END             reduce using rule 15 (s -> s2 .)
    ELSE            reduce using rule 15 (s -> s2 .)
    DEF             reduce using rule 15 (s -> s2 .)
    $end            reduce using rule 15 (s -> s2 .)

  ! RETURN          [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! ID              [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! DEF             [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! NUMBER          [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! STRING          [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! IF              [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! $end            [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! END             [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]
  ! ELSE            [ reduce using rule 32 (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2 .) ]


state 94

    (21) s2 -> IF LPAREN exp . RPAREN s1 ELSE s1
    (29) s2 -> IF LPAREN exp . RPAREN THEN s1 ELSE s1
    (55) exp -> exp . DOUBLEEQUAL exp

    RPAREN          shift and go to state 97
    DOUBLEEQUAL     shift and go to state 27


state 95

    (37) s2 -> IF exp s1 . ELSE s1
    (14) s -> s1 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 98
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)

  ! ELSE            [ reduce using rule 14 (s -> s1 .) ]


state 96

    (44) s2 -> IF exp THEN . s2 ELSE s2
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 76

    s2                             shift and go to state 99

state 97

    (21) s2 -> IF LPAREN exp RPAREN . s1 ELSE s1
    (29) s2 -> IF LPAREN exp RPAREN . THEN s1 ELSE s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    THEN            shift and go to state 101
    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 100
    stms                           shift and go to state 16
    s2                             shift and go to state 15
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 98

    (37) s2 -> IF exp s1 ELSE . s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 102
    stms                           shift and go to state 16
    s2                             shift and go to state 15
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 99

    (44) s2 -> IF exp THEN s2 . ELSE s2

    ELSE            shift and go to state 65


state 100

    (21) s2 -> IF LPAREN exp RPAREN s1 . ELSE s1
    (14) s -> s1 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 103
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)

  ! ELSE            [ reduce using rule 14 (s -> s1 .) ]


state 101

    (29) s2 -> IF LPAREN exp RPAREN THEN . s1 ELSE s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 104
    stms                           shift and go to state 16
    s2                             shift and go to state 15
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 102

    (37) s2 -> IF exp s1 ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! END             [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 37 (s2 -> IF exp s1 ELSE s1 .) ]


state 103

    (21) s2 -> IF LPAREN exp RPAREN s1 ELSE . s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 105
    stms                           shift and go to state 16
    s2                             shift and go to state 15
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 104

    (29) s2 -> IF LPAREN exp RPAREN THEN s1 . ELSE s1
    (14) s -> s1 .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 106
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)

  ! ELSE            [ reduce using rule 14 (s -> s1 .) ]


state 105

    (21) s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! END             [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 21 (s2 -> IF LPAREN exp RPAREN s1 ELSE s1 .) ]


state 106

    (29) s2 -> IF LPAREN exp RPAREN THEN s1 ELSE . s1
    (16) s1 -> . stms
    (17) s1 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (18) s1 -> . IF LPAREN exp RPAREN body ELSE body
    (19) s1 -> . IF LPAREN exp RPAREN s1 ELSE body
    (20) s1 -> . IF LPAREN exp RPAREN body ELSE s1
    (22) s1 -> . IF LPAREN exp RPAREN body
    (23) s1 -> . IF LPAREN exp RPAREN s1 ELSE s2
    (24) s1 -> . IF LPAREN exp RPAREN body ELSE s2
    (25) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (26) s1 -> . IF LPAREN exp RPAREN THEN body ELSE body
    (27) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE body
    (28) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s1
    (30) s1 -> . IF LPAREN exp RPAREN THEN body
    (31) s1 -> . IF LPAREN exp RPAREN THEN s1 ELSE s2
    (32) s1 -> . IF LPAREN exp RPAREN THEN body ELSE s2
    (33) s1 -> . IF exp s1 ELSE s1
    (34) s1 -> . IF exp body ELSE body
    (35) s1 -> . IF exp s1 ELSE body
    (36) s1 -> . IF exp body ELSE s1
    (38) s1 -> . IF exp body
    (39) s1 -> . IF exp body ELSE s2
    (40) s1 -> . IF exp THEN s1 ELSE s1
    (41) s1 -> . IF exp THEN body ELSE body
    (42) s1 -> . IF exp THEN s1 ELSE body
    (43) s1 -> . IF exp THEN body ELSE s1
    (45) s1 -> . IF exp THEN body
    (46) s1 -> . IF exp THEN s1 ELSE s2
    (47) s1 -> . IF exp THEN body ELSE s2
    (9) stms -> . stm
    (10) stms -> . stm stms
    (11) stm -> . exp
    (12) stm -> . exp PONTOVIRGULA
    (13) stm -> . s
    (48) stm -> . RETURN exp
    (49) stm -> . RETURN exp PONTOVIRGULA
    (50) exp -> . call
    (51) exp -> . assign
    (52) exp -> . NUMBER
    (53) exp -> . STRING
    (54) exp -> . ID
    (55) exp -> . exp DOUBLEEQUAL exp
    (14) s -> . s1
    (15) s -> . s2
    (57) call -> . ID LPAREN params RPAREN
    (58) call -> . ID LPAREN RPAREN
    (56) assign -> . ID EQ exp
    (21) s2 -> . IF LPAREN exp RPAREN s1 ELSE s1
    (29) s2 -> . IF LPAREN exp RPAREN THEN s1 ELSE s1
    (37) s2 -> . IF exp s1 ELSE s1
    (44) s2 -> . IF exp THEN s2 ELSE s2

    IF              shift and go to state 17
    RETURN          shift and go to state 8
    NUMBER          shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 25

    exp                            shift and go to state 6
    s1                             shift and go to state 107
    stms                           shift and go to state 16
    s2                             shift and go to state 15
    stm                            shift and go to state 23
    s                              shift and go to state 7
    call                           shift and go to state 24
    assign                         shift and go to state 11

state 107

    (29) s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .
    (14) s -> s1 .

  ! reduce/reduce conflict for RETURN resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ID resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for IF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for END resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (s -> s1 .)
  ! reduce/reduce conflict for $end resolved using rule 14 (s -> s1 .)
    RETURN          reduce using rule 14 (s -> s1 .)
    NUMBER          reduce using rule 14 (s -> s1 .)
    STRING          reduce using rule 14 (s -> s1 .)
    ID              reduce using rule 14 (s -> s1 .)
    IF              reduce using rule 14 (s -> s1 .)
    END             reduce using rule 14 (s -> s1 .)
    ELSE            reduce using rule 14 (s -> s1 .)
    DEF             reduce using rule 14 (s -> s1 .)
    $end            reduce using rule 14 (s -> s1 .)

  ! RETURN          [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! NUMBER          [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! STRING          [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! ID              [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! IF              [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! END             [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! ELSE            [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! DEF             [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]
  ! $end            [ reduce using rule 29 (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1 .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for DEF in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for END in state 22 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 23 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 23 resolved as shift
WARNING: shift/reduce conflict for STRING in state 23 resolved as shift
WARNING: shift/reduce conflict for ID in state 23 resolved as shift
WARNING: shift/reduce conflict for IF in state 23 resolved as shift
WARNING: shift/reduce conflict for DOUBLEEQUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for DOUBLEEQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 42 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 43 resolved as shift
WARNING: shift/reduce conflict for END in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 51 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 53 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 55 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 56 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 68 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 69 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 95 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 100 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 104 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (program -> stm)
WARNING: rejected rule (stms -> stm) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> call)
WARNING: rejected rule (exp -> call) in state 4
WARNING: reduce/reduce conflict in state 20 resolved using rule (stms -> stm stms)
WARNING: rejected rule (s1 -> stms) in state 20
WARNING: reduce/reduce conflict in state 58 resolved using rule (s1 -> IF exp s1 ELSE s1)
WARNING: rejected rule (s2 -> IF exp s1 ELSE s1) in state 58
WARNING: reduce/reduce conflict in state 58 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF exp s1 ELSE s1) in state 58
WARNING: reduce/reduce conflict in state 61 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF exp body ELSE s1) in state 61
WARNING: reduce/reduce conflict in state 62 resolved using rule (s -> s2)
WARNING: rejected rule (s1 -> IF exp body ELSE s2) in state 62
WARNING: reduce/reduce conflict in state 70 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF exp THEN s1 ELSE s1) in state 70
WARNING: reduce/reduce conflict in state 72 resolved using rule (s -> s2)
WARNING: rejected rule (s1 -> IF exp THEN s1 ELSE s2) in state 72
WARNING: reduce/reduce conflict in state 74 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF exp THEN body ELSE s1) in state 74
WARNING: reduce/reduce conflict in state 75 resolved using rule (s -> s2)
WARNING: rejected rule (s1 -> IF exp THEN body ELSE s2) in state 75
WARNING: reduce/reduce conflict in state 78 resolved using rule (s1 -> IF LPAREN exp RPAREN s1 ELSE s1)
WARNING: rejected rule (s2 -> IF LPAREN exp RPAREN s1 ELSE s1) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN s1 ELSE s1) in state 78
WARNING: reduce/reduce conflict in state 80 resolved using rule (s -> s2)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN s1 ELSE s2) in state 80
WARNING: reduce/reduce conflict in state 82 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN body ELSE s1) in state 82
WARNING: reduce/reduce conflict in state 83 resolved using rule (s -> s2)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN body ELSE s2) in state 83
WARNING: reduce/reduce conflict in state 88 resolved using rule (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1)
WARNING: rejected rule (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1) in state 88
WARNING: reduce/reduce conflict in state 88 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1) in state 88
WARNING: reduce/reduce conflict in state 90 resolved using rule (s -> s2)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2) in state 90
WARNING: reduce/reduce conflict in state 92 resolved using rule (s -> s1)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1) in state 92
WARNING: reduce/reduce conflict in state 93 resolved using rule (s -> s2)
WARNING: rejected rule (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2) in state 93
WARNING: reduce/reduce conflict in state 102 resolved using rule (s -> s1)
WARNING: rejected rule (s2 -> IF exp s1 ELSE s1) in state 102
WARNING: reduce/reduce conflict in state 105 resolved using rule (s -> s1)
WARNING: rejected rule (s2 -> IF LPAREN exp RPAREN s1 ELSE s1) in state 105
WARNING: reduce/reduce conflict in state 107 resolved using rule (s -> s1)
WARNING: rejected rule (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1) in state 107
WARNING: Rule (s2 -> IF exp s1 ELSE s1) is never reduced
WARNING: Rule (s1 -> IF exp s1 ELSE s1) is never reduced
WARNING: Rule (s1 -> IF exp body ELSE s1) is never reduced
WARNING: Rule (s1 -> IF exp body ELSE s2) is never reduced
WARNING: Rule (s1 -> IF exp THEN s1 ELSE s1) is never reduced
WARNING: Rule (s1 -> IF exp THEN s1 ELSE s2) is never reduced
WARNING: Rule (s1 -> IF exp THEN body ELSE s1) is never reduced
WARNING: Rule (s1 -> IF exp THEN body ELSE s2) is never reduced
WARNING: Rule (s2 -> IF LPAREN exp RPAREN s1 ELSE s1) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN s1 ELSE s1) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN s1 ELSE s2) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN body ELSE s1) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN body ELSE s2) is never reduced
WARNING: Rule (s2 -> IF LPAREN exp RPAREN THEN s1 ELSE s1) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s1) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN THEN s1 ELSE s2) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN THEN body ELSE s1) is never reduced
WARNING: Rule (s1 -> IF LPAREN exp RPAREN THEN body ELSE s2) is never reduced
